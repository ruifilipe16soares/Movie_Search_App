{"ast":null,"code":"import axios from 'axios';\nconst API_KEY = '422a42de'; // Coloca aqui a tua chave da OMDb~\n\n// Função para pesquisar filmes\nexport const searchMovies = async query => {\n  try {\n    const response = await axios.get(`http://www.omdbapi.com/?s=${query}&apikey=${API_KEY}`);\n    return response.data.Search || [];\n  } catch (error) {\n    console.error('Error fetching movies:', error);\n    return [];\n  }\n};\n\n// Função para obter detalhes de um filme\nexport const getMovieDetails = async id => {\n  try {\n    const response = await axios.get(`http://www.omdbapi.com/?i=${id}&apikey=${API_KEY}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching movie details:', error);\n    throw error;\n  }\n};\n\n// Função para adicionar uma avaliação\nexport const addReview = async (movieId, rating, comment, token) => {\n  try {\n    const response = await fetch('/api/reviews', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-auth-token': token\n      },\n      body: JSON.stringify({\n        movieId,\n        rating,\n        comment\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Erro ao submeter a avaliação');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error submitting review:', error);\n    throw error;\n  }\n};\n\n// Função para obter todas as avaliações de um filme\nexport const getReviews = async movieId => {\n  try {\n    const response = await axios.get(`/api/reviews/${movieId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching reviews:', error);\n    throw error;\n  }\n};\n\n// Função para obter a média das avaliações de um filme\nexport const getAverageRating = async movieId => {\n  try {\n    const response = await axios.get(`/api/reviews/${movieId}/average`);\n    return response.data.averageRating; // Assume que o backend retorna um objeto com \"averageRating\"\n  } catch (error) {\n    console.error('Error fetching average rating:', error);\n    throw error;\n  }\n};\n\n// Função para verificar a validade do token JWT\nexport const verifyToken = async token => {\n  try {\n    const response = await axios.get('/api/auth/verify', {\n      headers: {\n        'x-auth-token': token\n      }\n    });\n    return response.data;\n  } catch (err) {\n    console.error('Token verification failed', err);\n    return {\n      success: false\n    };\n  }\n};","map":{"version":3,"names":["axios","API_KEY","searchMovies","query","response","get","data","Search","error","console","getMovieDetails","id","addReview","movieId","rating","comment","token","fetch","method","headers","body","JSON","stringify","ok","Error","json","getReviews","getAverageRating","averageRating","verifyToken","err","success"],"sources":["C:/Users/ruifi/OneDrive/Ambiente de Trabalho/movie_search/frontend/src/services/movieService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_KEY = '422a42de'; // Coloca aqui a tua chave da OMDb~\r\n\r\n\r\n\r\n// Função para pesquisar filmes\r\nexport const searchMovies = async (query) => {\r\n  try {\r\n    const response = await axios.get(`http://www.omdbapi.com/?s=${query}&apikey=${API_KEY}`);\r\n    return response.data.Search || [];\r\n  } catch (error) {\r\n    console.error('Error fetching movies:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Função para obter detalhes de um filme\r\nexport const getMovieDetails = async (id) => {\r\n  try {\r\n    const response = await axios.get(`http://www.omdbapi.com/?i=${id}&apikey=${API_KEY}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching movie details:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Função para adicionar uma avaliação\r\nexport const addReview = async (movieId, rating, comment, token) => {\r\n  try {\r\n    const response = await fetch('/api/reviews', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'x-auth-token': token,\r\n      },\r\n      body: JSON.stringify({ movieId, rating, comment })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Erro ao submeter a avaliação');\r\n    }\r\n\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error('Error submitting review:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Função para obter todas as avaliações de um filme\r\nexport const getReviews = async (movieId) => {\r\n  try {\r\n    const response = await axios.get(`/api/reviews/${movieId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching reviews:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Função para obter a média das avaliações de um filme\r\nexport const getAverageRating = async (movieId) => {\r\n  try {\r\n    const response = await axios.get(`/api/reviews/${movieId}/average`);\r\n    return response.data.averageRating; // Assume que o backend retorna um objeto com \"averageRating\"\r\n  } catch (error) {\r\n    console.error('Error fetching average rating:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Função para verificar a validade do token JWT\r\nexport const verifyToken = async (token) => {\r\n  try {\r\n    const response = await axios.get('/api/auth/verify', {\r\n      headers: { \r\n        'x-auth-token': token,\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error('Token verification failed', err);\r\n    return { success: false };\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}